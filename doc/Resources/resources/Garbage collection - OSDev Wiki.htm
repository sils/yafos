<!DOCTYPE html>
<html dir="ltr" class="client-js" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Garbage collection - OSDev Wiki</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.18.0">
<link rel="shortcut icon" href="http://wiki.osdev.org/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)">
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd">
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom">
<link rel="stylesheet" href="Garbage%20collection%20-%20OSDev%20Wiki_files/load.css">
<style type="text/css" media="all">.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}

/* cache key: wikidb:resourceloader:filter:minify-css:4:4250852ed2349a0d4d0fc6509a3e7d4c */
</style><style type="text/css" media="all">.js-messagebox{margin:1em 5%;padding:0.5em 2.5%;border:1px solid #ccc;background-color:#fcfcfc;font-size:0.8em}.js-messagebox .js-messagebox-group{margin:1px;padding:0.5em 2.5%;border-bottom:1px solid #ddd}.js-messagebox .js-messagebox-group:last-child{border-bottom:thin none transparent}

/* cache key: wikidb:resourceloader:filter:minify-css:4:8b08bdc91c52a9ffba396dccfb5b473c */
</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="Garbage%20collection%20-%20OSDev%20Wiki_files/load_002.css">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="Garbage%20collection%20-%20OSDev%20Wiki_files/load_003.php"></script><script src="Garbage%20collection%20-%20OSDev%20Wiki_files/load_002.php"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Garbage_collection", "wgTitle": "Garbage collection", "wgCurRevisionId": 11342, "wgArticleId": 1698, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Memory management"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script><script type="text/javascript" src="Garbage%20collection%20-%20OSDev%20Wiki_files/load.php"></script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Garbage_collection action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div class="js-messagebox" id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Garbage collection</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="#mw-head">navigation</a>,
					<a href="#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div dir="ltr" class="mw-content-ltr" lang="en"><p><b>Garbage Collection</b> (<b>GC</b>) is a <a href="http://wiki.osdev.org/Memory_management" title="Memory management">memory management</a>
 technique frequently used in high-level languages that allows the 
programmer not to worry about when memory areas should be returned to 
the system. Virtually all the <a href="http://wiki.osdev.org/index.php?title=Object-oriented_language&amp;action=edit&amp;redlink=1" class="new" title="Object-oriented language (page does not exist)">object-oriented languages</a> introduced after <a href="http://wiki.osdev.org/C%2B%2B" title="C++">C++</a>
 provide some way of garbage collection (including Python, Java, 
Objective C). It can also be found in LISP or PERL, for instance.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle">&nbsp;[<a href="#" class="internal" id="togglelink">hide</a>]&nbsp;</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#How_does_it_work.3F"><span class="tocnumber">1</span> <span class="toctext">How does it work?</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Reference_counting"><span class="tocnumber">1.1</span> <span class="toctext">Reference counting</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Mark_.26_Sweep"><span class="tocnumber">1.2</span> <span class="toctext">Mark &amp; Sweep</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Copy_collectors"><span class="tocnumber">1.3</span> <span class="toctext">Copy collectors</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="#Can_I_use_garbage_collection_in_my_OS.3F"><span class="tocnumber">2</span> <span class="toctext">Can I use garbage collection in my OS?</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#References"><span class="tocnumber">3</span> <span class="toctext">References</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="#Forum"><span class="tocnumber">3.1</span> <span class="toctext">Forum</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Websites"><span class="tocnumber">3.2</span> <span class="toctext">Websites</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table>
<h2> <span class="mw-headline" id="How_does_it_work.3F"> How does it work? </span></h2>
<h3> <span class="mw-headline" id="Reference_counting"> Reference counting </span></h3>
<p>The most basic implementation of garbage collection uses <b>reference counting</b>: each object is associated with a counter that tells how many other objects refer to it. Say for instance you have a <tt>Disk</tt> object, every time your system needs another reference to that object (for instance because the <tt>DiskPartition</tt> object has a reference to the parent <tt>Disk</tt> object), the reference counter of <tt>Disk</tt> is incremented. Of course, if programmed manually, this is tedious and bugprone (although in C++ at least, the use of <a href="http://wiki.osdev.org/Smart_Pointer" title="Smart Pointer">smart pointers</a>
 can automate this bookkeeping). Plus GC's solely based on reference 
counting will be unable to free self-referencing (or circular) 
structures, meaning that memory leaks are possible.
</p>
<h3> <span class="mw-headline" id="Mark_.26_Sweep"> Mark &amp; Sweep </span></h3>
<p>A <b>mark-sweep garbage collector</b> traverses all reachable objects
 in the heap by following pointers beginning with the "roots", i.e. 
pointers stored in statically allocated or <a href="http://wiki.osdev.org/Stack" title="Stack">stack</a>
 allocated program variables (and possibly registers as well, depending 
on the GC implementation). All such reachable objects are marked. A 
sweep over the entire heap is then performed to restore unmarked objects
 to a free list, so they can be reallocated.
</p>
<dl><dd> <i>Drawn from Hans Boehm's texts, see links below.</i>
</dd></dl>
<h3> <span class="mw-headline" id="Copy_collectors"> Copy collectors </span></h3>
<p>In contrast, a <b>copying collector</b> copies reachable objects to 
another region of memory as they are being traversed. Provided the 
traversal is done in breadth first order, there is a well-known and 
simple algorithm for performing this traversal without auxiliary storage
 or recursion. After such a traversal all surviving objects reside in a 
contiguous region of memory, and all pointers have been updated to point
 to the new object locations. The previously used region of memory can 
then be reused in its entirety. Allocation becomes trivial, since all 
free space is always contiguous.
</p><p>During the process, the GC builds an object graph to track the 
"live" objects so that it can update references to any objects that it 
moves. This means that with a compacting GC, there is no extra level of 
indirection required in order to move objects around in memory. It also 
means that programmers cannot rely on the values of references remaining
 stable during execution of their program, which is one reason why 
languages such as Java and C# disallow pointer arithmetic on references 
to garbage collected objects.
</p><p>A variant of compacting collectors is the <b>generational garbage collector</b>
 where the memory is partitioned among recently-created objects and 
longer-lived objects. If an object remains present in the 
"recently-created" heap for <i>N</i> sweeps of the GC, it is then moved 
to the "longer-lived" heap. This technique is used by some JVMs and the 
.NET CLR to reduce the cost of heap-sweeping as the heap grows larger. 
It is based on the assumption that a long-lived object is less likely to
 become garbage and thus that the "long-lived objects" heap could be 
swept with lower frequency.
</p><p>One of the major advantages of a compacting collector is that it 
makes allocating from the heap extremely fast and scalable to 
multiprocessor systems. All you have to do to allocate a new object is 
to increment a "top-of-heap" pointer and initialize a few fields, which 
can be done in constant time. A primitive <tt>malloc()</tt> would, in 
comparison, have to scan the free block list to find a block large 
enough to satisfy the request, with a worst-case complexity of <i>O</i>(<i>n</i>) (<i>n</i> being the number of free blocks), all the while holding a global heap lock – not a Good Idea<sup>tm</sup> in a multithreading system. (Modern <tt>malloc()</tt> implementations use a number of techniques to reduce the impact of this, and achieve <i>O</i>(1) behaviour for most cases.)
</p><p>On the other hand, most compacting collectors need to "stop the 
world" (i.e. suspend all threads) during a collection so that they can 
safely move objects around. This makes them very unsuitable for use in a
 real-time system, and that most likely includes OS kernels as well.
</p>
<h2> <span class="mw-headline" id="Can_I_use_garbage_collection_in_my_OS.3F"> Can I use garbage collection in my OS? </span></h2>
<p>There isn't a real agreement on that among the community. Some says 
you shouldn't even think about it, other says it is fully possible. If 
this is your very first OS and unless you start your OS with the goal of
 proving that a garbage collector in kernel land is possible and better 
than by-hand memory management, then probably you shouldn't mess with 
garbage collection.
</p><p>Whatever you chose to do, make sure that your garbage collector 
implementation is fully tested and stressed in a host environment before
 moving it into kernel space. And that missing a few garbage items is 
probably better than collecting live items&nbsp;:P
</p><p>The "Singularity" project (Microsoft Research) uses GC 
everywhere, including in the kernel, so it can be done. Yet it needs to 
be done properly and it has important implications on your kernel 
design:
</p>
<ul><li> Using a single garbage-collected heap for every chunk of memory (both kernel and user) is probably a Bad Thing<sup>tm</sup>. You are most likely to have collected kernel-wide heap, collected process(/thread)-pinned heap(s) and uncollected kernel heap.
</li><li> Having the garbage-collector freeze everything to work is 
unacceptable at kernel level, yet not all GC's require this (concurent 
mark &amp; sweep being an example).
</li><li> Garbage collection is often coupled with strong object typing 
and important restrictions on pointers arithmetic which might not be 
practical in C/C++ ... still under discussion.
</li></ul>
<h2> <span class="mw-headline" id="References"> References </span></h2>
<h3> <span class="mw-headline" id="Forum"> Forum </span></h3>
<ul><li> <a rel="nofollow" class="external text" href="http://www.osdev.org/phpBB2/viewtopic.php?t=11400">"Newbie Memory Management Question"</a>
</li><li> <a rel="nofollow" class="external text" href="http://www.osdev.org/phpBB2/viewtopic.php?t=11332">"Digital Mars C/D compilers"</a>
</li></ul>
<h3> <span class="mw-headline" id="Websites"> Websites </span></h3>
<ul><li> <a href="http://wikipedia.org/wiki/Garbage_collection_%28computer_science%29" class="extiw" title="wikipedia:Garbage collection (computer science)">Wikipedia on Garbage collection</a>
</li><li> <a rel="nofollow" class="external free" href="http://www-128.ibm.com/developerworks/library/l-memory/">http://www-128.ibm.com/developerworks/library/l-memory/</a> - IBM article about memory management
</li><li> <a rel="nofollow" class="external free" href="ftp://ftp.research.microsoft.com/pub/tr/TR-2005-135.pdf">ftp://ftp.research.microsoft.com/pub/tr/TR-2005-135.pdf</a> - Microsoft Singularity Technical Report
</li><li> <a rel="nofollow" class="external text" href="http://msdn.microsoft.com/library/default.asp?url=/msdnmag/issues/1100/gci/toc.asp">"GC in the .NET Framework Part I"</a>
</li><li> <a rel="nofollow" class="external text" href="http://msdn.microsoft.com/msdnmag/issues/1200/GCI2/default.aspx">"GC in the .NET Framework Part II"</a>
</li><li> <a rel="nofollow" class="external free" href="http://www.hpl.hp.com/personal/Hans_Boehm/gc/">http://www.hpl.hp.com/personal/Hans_Boehm/gc/</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 50/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1698-0!*!0!!en!*!* and timestamp 20130613022516 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Garbage_collection&amp;oldid=11342">http://wiki.osdev.org/index.php?title=Garbage_collection&amp;oldid=11342</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="http://wiki.osdev.org/Category:Memory_management" title="Category:Memory management">Memory management</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Garbage_collection" title="You are encouraged to log in; however, it is not mandatory [alt-shift-o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li id="ca-nstab-main" class="selected"><span><a href="http://wiki.osdev.org/Garbage_collection" title="View the content page [alt-shift-c]" accesskey="c">Page</a></span></li>
					<li id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:Garbage_collection&amp;action=edit&amp;redlink=1" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="http://wiki.osdev.org/Garbage_collection">Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Garbage_collection&amp;action=edit" title="This page is protected.
You can view its source [alt-shift-e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Garbage_collection&amp;action=history" title="Past revisions of this page [alt-shift-h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="/index.php" id="searchform">
		<input name="title" value="Special:Search" type="hidden">
				<input name="search" title="Search OSDev Wiki [alt-shift-f]" accesskey="f" id="searchInput" type="search">		<input name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" type="submit">		<input name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" type="submit">			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="http://wiki.osdev.org/Main_Page" title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id="p-navigation">
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="http://wiki.osdev.org/Main_Page" title="Visit the main page [alt-shift-z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="http://wiki.osdev.org/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="http://wiki.osdev.org/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [alt-shift-x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id="p-about">
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="http://wiki.osdev.org/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="http://wiki.osdev.org/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="http://wiki.osdev.org/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [alt-shift-r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id="p-tb">
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Garbage_collection" title="A list of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Garbage_collection" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Garbage_collection&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Garbage_collection&amp;oldid=11342" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 29 March 2011, at 03:33.</li>
											<li id="footer-info-viewcount">This page has been accessed 9,297 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wiki.osdev.org/OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://wiki.osdev.org/OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="http://wiki.osdev.org/OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="Garbage%20collection%20-%20OSDev%20Wiki_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" height="31" width="88"></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="Garbage%20collection%20-%20OSDev%20Wiki_files/load_006.php"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script><script type="text/javascript" src="Garbage%20collection%20-%20OSDev%20Wiki_files/load_004.php"></script>
<script src="Garbage%20collection%20-%20OSDev%20Wiki_files/load_005.php"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.496 secs. -->
	

</body></html>