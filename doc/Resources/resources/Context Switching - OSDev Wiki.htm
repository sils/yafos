<!DOCTYPE html>
<html dir="ltr" class="client-js" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Context Switching - OSDev Wiki</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.18.0">
<link rel="shortcut icon" href="http://wiki.osdev.org/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)">
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd">
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom">
<link rel="stylesheet" href="Context%20Switching%20-%20OSDev%20Wiki_files/load.css">
<style type="text/css" media="all">.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}

/* cache key: wikidb:resourceloader:filter:minify-css:4:4250852ed2349a0d4d0fc6509a3e7d4c */
</style><style type="text/css" media="all">.js-messagebox{margin:1em 5%;padding:0.5em 2.5%;border:1px solid #ccc;background-color:#fcfcfc;font-size:0.8em}.js-messagebox .js-messagebox-group{margin:1px;padding:0.5em 2.5%;border-bottom:1px solid #ddd}.js-messagebox .js-messagebox-group:last-child{border-bottom:thin none transparent}

/* cache key: wikidb:resourceloader:filter:minify-css:4:8b08bdc91c52a9ffba396dccfb5b473c */
</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="Context%20Switching%20-%20OSDev%20Wiki_files/load_002.css">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="Context%20Switching%20-%20OSDev%20Wiki_files/load_003.php"></script><script src="Context%20Switching%20-%20OSDev%20Wiki_files/load_002.php"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Context_Switching", "wgTitle": "Context Switching", "wgCurRevisionId": 13509, "wgArticleId": 1418, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Processes and Threads"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script><script type="text/javascript" src="Context%20Switching%20-%20OSDev%20Wiki_files/load.php"></script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Context_Switching action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div class="js-messagebox" id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Context Switching</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="#mw-head">navigation</a>,
					<a href="#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div dir="ltr" class="mw-content-ltr" lang="en"><p>In your average, 
memory-protected environment, a "context" is a virtual address space, 
the executable contained in it, its data etc.
</p><p>A "context switch" occurs for a variety of reasons - because a 
kernel function has been called, the application has been preempted, or 
because it had yielded its time slice.
</p><p>A context switch involves storing the old state and retrieving 
the new state. The actual information stored and retrieved may include 
EIP, the general registers, the segment registers, CR3 (and the paging 
structures), FPU/MMX registers, SSE registers and other things. Because a
 context switch can involve changing a large amount data it can be the 
one most costly operation in an operating system.
</p><p>There are many ways of performing a context switch. The x86 CPU 
provides a way of doing it completely in hardware, but for performance 
and portability reasons most modern OS's do context switches in 
software.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle">&nbsp;[<a href="#" class="internal" id="togglelink">hide</a>]&nbsp;</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Software_Context_Switching"><span class="tocnumber">1</span> <span class="toctext">Software Context Switching</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Details"><span class="tocnumber">1.1</span> <span class="toctext">Details</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Other_Possibilities"><span class="tocnumber">1.2</span> <span class="toctext">Other Possibilities</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Performance_Considerations"><span class="tocnumber">1.3</span> <span class="toctext">Performance Considerations</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="#Hardware_Context_Switching"><span class="tocnumber">2</span> <span class="toctext">Hardware Context Switching</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="#A_step_further_with_Hardware_Switches_..."><span class="tocnumber">2.1</span> <span class="toctext">A step further with Hardware Switches ...</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Performance_Considerations_2"><span class="tocnumber">2.2</span> <span class="toctext">Performance Considerations</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table>
<h2> <span class="mw-headline" id="Software_Context_Switching">Software Context Switching</span></h2>
<p>Software context switching can be used on all CPUs, and can be used 
to save and reload only the state that needs to be changed. The basic 
idea is to provide a function that saves the current <a href="http://wiki.osdev.org/Stack" title="Stack">stack pointer</a>
 (ESP) and reloads a new stack pointer (SS:ESP). When the function is 
called EIP would be stored on the old stack and a new EIP would be 
popped off the new stack when the function returns. Of course the 
operating system usually needs to change much more than just the stack 
and EIP.
</p><p>Eflags, the general registers and any data segment registers 
should also be pushed on the old stack and popped off the new stack. If 
the paging structures need to be changed, CR3 will also need to be 
reloaded.
</p><p>The FPU/MMX and SSE state could be saved and reloaded, but the 
CPU can also be tricked into generating an exception the first time that
 an FPU/MMX or SSE instruction is used by copying the hardware context 
switch mechanism (setting the TS flag in CR0).
</p>
<h3> <span class="mw-headline" id="Details">Details</span></h3>
<p>When the CPU changes to a higher privilege level (CPL 0 being the highest) it will load new values for SS and ESP from the <a href="http://wiki.osdev.org/Task_State_Segment" title="Task State Segment">Task State Segment</a> (TSS). <b>If the operating system uses multiple privilege levels it must create and load a TSS</b>.
 An interrupt generated while the processor is in ring 3 will switch the
 stack to the resulting permission level stack entry in the TSS.  During
 a software context switch the values for SS0:ESP0 (and possibly 
SS1:ESP1 or SS2:ESP2) will need to be set in the TSS.  If the processor 
is operating in <a href="http://wiki.osdev.org/Long_Mode" title="Long Mode" class="mw-redirect">Long Mode</a>, the stack selectors are no longer present and the RSP0-2 fields are used to provide the destination stack address.
</p><p>If a context switch also entails a change in IO port permissions, a different TSS may be loaded for each <a href="http://wiki.osdev.org/index.php?title=Process&amp;action=edit&amp;redlink=1" class="new" title="Process (page does not exist)">Process</a>.
  When running virtual 8086 tasks, the IO permission map in the TSS 
isn't checked to provide I/O port protection.  IO protection can be 
implemented by setting the IO Permission Level to 0.  This will generate
 a <a href="http://wiki.osdev.org/index.php?title=General_Protection_Fault&amp;action=edit&amp;redlink=1" class="new" title="General Protection Fault (page does not exist)">General Protection Fault</a>
 when a process in ring 3 attempts to write to or read from an IO port. 
 The GP fault handler can then check permissions and carry out the port 
IO on behalf of the user-mode code.
</p>
<h3> <span class="mw-headline" id="Other_Possibilities">Other Possibilities</span></h3>
<p>During a context switch the operating system can do additional work 
that isn't strictly part of the context switch. One common thing is 
calculating the amount of time the last thread/task/process used so that
 software (and the end user) can determine where all the CPU time is 
going. Another possibility would be dynamically changing 
thread/task/process priorities.
</p>
<h3> <span class="mw-headline" id="Performance_Considerations">Performance Considerations</span></h3>
<p>Translating a virtual address to a physical address is expensive.  
The processor must access the pages table structures, which usually have
 3-4 levels.  Thus, a single memory access actually requires 4-5 memory 
accesses.
</p><p>To mitigate this issue, most modern processors cache virtual-to-physical translations in a translation lookaside buffer (<a href="http://wiki.osdev.org/TLB" title="TLB">TLB</a>).  The TLB is part of the MMU and is (mostly) transparent to the system developer and users.
</p><p>When virtual memory is updated -- for instance, when one 
process's address space is replaced with another's during a software 
context switch -- the TLB suddenly contains "stale" translations that 
are no longer valid.  These translations must be flushed for correct 
behavior.  Writing to CR3 will flush the TLB.  However, by writing to 
CR3, you also eliminate all translations for the kernel, in addition to 
the last user process.  This is less than ideal, as the next few 
operations must wait for the slow virtual-to-physical translations.
</p><p>Recent Intel and AMD processors sport a tagged TLB, which allow 
you to tag a given translation with a certain address space 
configuration.  In this scheme TLB entries never get "stale", and thus 
there is no need to flush the TLB.
</p>
<h2> <span class="mw-headline" id="Hardware_Context_Switching">Hardware Context Switching</span></h2>
<p>Some CPU's have a special mechanism to perform context switches in 
hardware. The following information gives details on 80x86 CPU's only.
</p><p>The hardware context switching mechanism (called Hardware Task 
Switching in the CPU manuals) can be used to change all of the CPU's 
state except for the FPU/MMX and SSE state. To use the hardware 
mechanism you need to tell the CPU where to save the existing CPU state,
 and where to load the new CPU state. The CPU state is always stored in a
 special data structure called a TSS (Task State Segment).
</p><p>To trigger a context switch and tell the CPU where to load it's 
new state from the far version of CALL and JMP instructions are used. 
The offset given is ignored, and the segment is used to refer to a "TSS 
Descriptor" in the GDT. The TSS descriptor is used to specify the base 
address and limit of the TSS to be used to load the new CPU state from.
</p><p>The CPU has a register called the "TR" (or Task Register) which 
tells which TSS will receive the old CPU state. When the TR register is 
loaded with an "LDTR" instruction the CPU looks at the GDT entry 
(specified with LDTR) and loads the visible part of TR with the GDT 
entry, and the hidden part with the base and limit of the GDT entry. 
When the CPU state is saved the hidden part of TR is used.
</p>
<h3> <span class="mw-headline" id="A_step_further_with_Hardware_Switches_...">A step further with Hardware Switches ...</span></h3>
<p>In addition to the CALL and JMP instructions, a context switch can be
 triggered by a using a Task-Gate Descriptor. Unlike TSS Descriptors, 
task-gate descriptors can be in the GDT, LDT or IDT. Normally, task-gate
 descriptors are used in the IDT, so that an exception (or IRQ) can 
cause a context switch, which is the only way of handling a double fault
 exception with complete reliability.
</p><p>The design of the basic hardware mechanism is limited by the 
number of usable entries in the GDT because TSS descriptors can be in 
the GDT only (theoretical limit is 8190 tasks). However, it is possible 
to avoid this restriction by dynamically changing TSS descriptor/s, by 
setting the TSS descriptor's base before each context switch. Care must 
be taken when using this approach when task-gate descriptors in the IDT 
are also used (the TSS descriptors referred to by each task-gate 
descriptor would have to be constant). Also context switches can't be 
initiated with a CALL instruction, because the CPU saves the GDT entry 
to use for the return in the TSS's "backlink" field.
</p><p>If the FPU/MMX and SSE state also needs to be changed during a 
context switch there are a few options. The data could be explicitly 
saved by any code that causes a context switch, or the CPU can generate 
an exception the first time an FPU/MMX or SSE instruction is used. With 
the second option, the exception handlers would save the old FPU/MMX/SSE
 state and reload the new state. This option may prevent this data from 
being changed when it's not necessary (for e.g. when no tasks or only 
one task is using them), but fails to work correctly in a multiprocessor
 environment without additional synchronization which may be more 
expensive than using the first option.
</p>
<h3> <span class="mw-headline" id="Performance_Considerations_2">Performance Considerations</span></h3>
<p>Because the hardware mechanism saves almost all of the CPU state it 
can be slower than is necessary. For example, when the CPU loads new 
segment registers it does all of the access and permission checks that 
are involved. As most modern operating systems don't use segmentation 
loading the segment registers during context switches may be not be 
required, so for performance reasons these operating systems tend not to
 use the hardware context switching mechanism. Due to it not being used 
as much CPU manufacturers don't optimize CPUs for this method anymore 
(AFAIK). In addition the new 64 bit CPU's do not support hardware 
context switches when in 64 bit/long mode.
</p><p>However, there was an interesting post on OSNews by Aage in July 
2004, quantifying the amount of unavoidable hardware overhead involved 
in a context switch. It appears that the hardware overhead in a context 
switch on a modern P4 processor dwarfs the overhead involved in 
saving/loading registers (995ns of HW overhead vs 67ns to save/load 
registers). From this, it would appear that any performance gains from 
switching to software task switching would be minimal, amounting to no 
more than a few percentage points. However, Brendan points out in <a rel="nofollow" class="external text" href="http://forum.osdev.org/viewtopic.php?p=117933#p117933">this post</a> that this is <i>horrendously wrong</i> and explains why.
</p>
<table class="toccolours" style="padding: 20px 30px 10px 10px;" align="center" width="75%">

<tbody><tr>
<td>
<div class="scroll">
<p>There is actually quite little you can do in software to improve the 
overhead of context switches. Most of the overhead is hardware related. 
Sure you can tweak the code that stores/restores registers, performs 
scheduling, and stuff, but in the grand scheme of things hardware 
overhead dominates (I'll substantiate that below). Using the x86 as an 
example architecture:
</p><p>Assuming the context switch is initiated by an interrupt, the 
overhead of switching from user-level to kernel-level on a (2.8 GHz) P4 
is 1348 cycles, on a (200 MHz) P2 227 cycles. Why the big cycle 
difference? It seems like the P4 flushes its micro-op cache as part of 
handling an interrupt (go to arstechnica.com for some details on the 
micro-op cache). Counting actual time, the P4 takes 481 ns and the P2 
1335 ns.
</p><p>The return from kernel-level to user-level will cost you 923 cycles (330 ns) on a P4, 180 cycles (900 ns) on a P2.
</p><p>The overhead of storing / restoring registers (not counting any 
TLB overhead / excluding cost of FPU register store / restore) is 188 
cycles on the P4 (67 ns), 79 cycles on the P2 (395 ns).
</p><p>A context switch also includes the overhead of switching address 
spaces (if we're switching between processes, not threads). The minimal 
cost of switching between two address spaces (counting a minimal TLB 
reload of 1 code page, 1 data page, and 1 stack page) is 516 cycles on a
 P4 (184 ns) and 177 cycles on a P3 (885 ns).
</p><p>So the equation is (for a P4):
</p><p>811 ns (HW) + 184 ns (HW: address space switch) + 67 ns (register
 store / restore) + ?? (scheduling overhead) = cost of context switch.
</p><p>That'll leave you with 995 ns of HW overhead. You can spend as 
much as 2598 cycles in the scheduler before SW overhead dominates.
</p><p>So, measured in actual time the cost of context switches is 
declining (P2: 3120 ns vs. P4: 995 ns - 3:1). But looking at CPU clock 
speed differences (P2: 200 MHz vs P4: 2800 MHz - 1:14), one can only 
conclude that the cost of context switches is rising.
</p><p>And yes, I used some home-grown software to perform these measurements.
</p>
</div>
<p style="text-align: right;">
—Aage, <i>OSNews</i>
</p>
</td></tr></tbody></table>

<!-- 
NewPP limit report
Preprocessor node count: 71/1000000
Post-expand include size: 2173/2097152 bytes
Template argument size: 2045/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1418-0!*!0!!en!*!* and timestamp 20130612171202 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Context_Switching&amp;oldid=13509">http://wiki.osdev.org/index.php?title=Context_Switching&amp;oldid=13509</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="http://wiki.osdev.org/Category:Processes_and_Threads" title="Category:Processes and Threads">Processes and Threads</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Context_Switching" title="You are encouraged to log in; however, it is not mandatory [alt-shift-o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li id="ca-nstab-main" class="selected"><span><a href="http://wiki.osdev.org/Context_Switching" title="View the content page [alt-shift-c]" accesskey="c">Page</a></span></li>
					<li id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:Context_Switching&amp;action=edit&amp;redlink=1" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="http://wiki.osdev.org/Context_Switching">Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Context_Switching&amp;action=edit" title="This page is protected.
You can view its source [alt-shift-e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Context_Switching&amp;action=history" title="Past revisions of this page [alt-shift-h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="/index.php" id="searchform">
		<input name="title" value="Special:Search" type="hidden">
				<input name="search" title="Search OSDev Wiki [alt-shift-f]" accesskey="f" id="searchInput" type="search">		<input name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" type="submit">		<input name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" type="submit">			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="http://wiki.osdev.org/Main_Page" title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id="p-navigation">
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="http://wiki.osdev.org/Main_Page" title="Visit the main page [alt-shift-z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="http://wiki.osdev.org/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="http://wiki.osdev.org/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [alt-shift-x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id="p-about">
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="http://wiki.osdev.org/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="http://wiki.osdev.org/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="http://wiki.osdev.org/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [alt-shift-r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id="p-tb">
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Context_Switching" title="A list of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Context_Switching" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Context_Switching&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Context_Switching&amp;oldid=13509" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 5 June 2012, at 19:47.</li>
											<li id="footer-info-viewcount">This page has been accessed 62,903 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wiki.osdev.org/OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://wiki.osdev.org/OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="http://wiki.osdev.org/OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="Context%20Switching%20-%20OSDev%20Wiki_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" height="31" width="88"></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="Context%20Switching%20-%20OSDev%20Wiki_files/load_006.php"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script><script type="text/javascript" src="Context%20Switching%20-%20OSDev%20Wiki_files/load_004.php"></script>
<script src="Context%20Switching%20-%20OSDev%20Wiki_files/load_005.php"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.287 secs. -->
	

</body></html>