<!DOCTYPE html>
<html dir="ltr" class="client-js" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Paging - OSDev Wiki</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.18.0">
<link rel="shortcut icon" href="http://wiki.osdev.org/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)">
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd">
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom">
<link rel="stylesheet" href="Paging%20-%20OSDev%20Wiki_files/load.css">
<style type="text/css" media="all">.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}

/* cache key: wikidb:resourceloader:filter:minify-css:4:4250852ed2349a0d4d0fc6509a3e7d4c */
</style><style type="text/css" media="all">.js-messagebox{margin:1em 5%;padding:0.5em 2.5%;border:1px solid #ccc;background-color:#fcfcfc;font-size:0.8em}.js-messagebox .js-messagebox-group{margin:1px;padding:0.5em 2.5%;border-bottom:1px solid #ddd}.js-messagebox .js-messagebox-group:last-child{border-bottom:thin none transparent}

/* cache key: wikidb:resourceloader:filter:minify-css:4:8b08bdc91c52a9ffba396dccfb5b473c */
</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="Paging%20-%20OSDev%20Wiki_files/load_002.css">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="Paging%20-%20OSDev%20Wiki_files/load_003.php"></script><script src="Paging%20-%20OSDev%20Wiki_files/load.php"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Paging", "wgTitle": "Paging", "wgCurRevisionId": 14596, "wgArticleId": 2122, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Memory management", "Security"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script><script type="text/javascript" src="Paging%20-%20OSDev%20Wiki_files/load_002.php"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm.source-asm .de1, .asm.source-asm .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.asm.source-asm  {font-family:monospace;}
.asm.source-asm .imp {font-weight: bold; color: red;}
.asm.source-asm li, .asm.source-asm .li1 {font-weight: normal; vertical-align:top;}
.asm.source-asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm.source-asm .li2 {font-weight: bold; vertical-align:top;}
.asm.source-asm .kw1 {color: #00007f; font-weight: bold;}
.asm.source-asm .kw2 {color: #0000ff; font-weight: bold;}
.asm.source-asm .kw3 {color: #00007f;}
.asm.source-asm .kw4 {color: #000000; font-weight: bold;}
.asm.source-asm .kw5 {color: #000000; font-weight: bold;}
.asm.source-asm .co1 {color: #666666; font-style: italic;}
.asm.source-asm .co2 {color: #adadad; font-style: italic;}
.asm.source-asm .es0 {color: #000099; font-weight: bold;}
.asm.source-asm .br0 {color: #009900; font-weight: bold;}
.asm.source-asm .sy0 {color: #339933;}
.asm.source-asm .st0 {color: #7f007f;}
.asm.source-asm .nu0 {color: #0000ff;}
.asm.source-asm .ln-xtra, .asm.source-asm li.ln-xtra, .asm.source-asm div.ln-xtra {background-color: #ffc;}
.asm.source-asm span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Paging action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div class="js-messagebox" id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Paging</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="#mw-head">navigation</a>,
					<a href="#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div dir="ltr" class="mw-content-ltr" lang="en"><div class="thumb tright"><div class="thumbinner" style="width:469px;"><a href="http://wiki.osdev.org/File:Paging_Structure.gif" class="image"><img alt="" src="Paging%20-%20OSDev%20Wiki_files/467px-Paging_Structure.gif" class="thumbimage" height="350" width="467"></a>  <div class="thumbcaption"><div class="magnify"><a href="http://wiki.osdev.org/File:Paging_Structure.gif" class="internal" title="Enlarge"><img src="Paging%20-%20OSDev%20Wiki_files/magnify-clip.png" alt="" height="11" width="15"></a></div>x86 Paging Structure</div></div></div>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle">&nbsp;[<a href="#" class="internal" id="togglelink">hide</a>]&nbsp;</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#MMU"><span class="tocnumber">2</span> <span class="toctext">MMU</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Overview_2"><span class="tocnumber">2.1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Page_Directory"><span class="tocnumber">2.2</span> <span class="toctext">Page Directory</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Page_Table"><span class="tocnumber">2.3</span> <span class="toctext">Page Table</span></a>
<ul>
<li class="toclevel-3 tocsection-6"><a href="#INVLPG"><span class="tocnumber">2.3.1</span> <span class="toctext">INVLPG</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-7"><a href="#Example"><span class="tocnumber">2.4</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="#Enabling"><span class="tocnumber">3</span> <span class="toctext">Enabling</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#Physical_Address_Extension"><span class="tocnumber">4</span> <span class="toctext">Physical Address Extension</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#Usage"><span class="tocnumber">5</span> <span class="toctext">Usage</span></a>
<ul>
<li class="toclevel-2 tocsection-11"><a href="#Virtual_Address_Spaces"><span class="tocnumber">5.1</span> <span class="toctext">Virtual Address Spaces</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#Virtual_Memory"><span class="tocnumber">5.2</span> <span class="toctext">Virtual Memory</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="#Manipulation"><span class="tocnumber">6</span> <span class="toctext">Manipulation</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="#Page_Faults"><span class="tocnumber">7</span> <span class="toctext">Page Faults</span></a>
<ul>
<li class="toclevel-2 tocsection-15"><a href="#Handling"><span class="tocnumber">7.1</span> <span class="toctext">Handling</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="#Paging_Tricks"><span class="tocnumber">8</span> <span class="toctext">Paging Tricks</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="#See_Also"><span class="tocnumber">9</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-18"><a href="#Articles"><span class="tocnumber">9.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#External_Links"><span class="tocnumber">9.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table>
<h2> <span class="mw-headline" id="Overview">Overview</span></h2>
<p>32-bit x86 processors support a 4GiB virtual address space and 
current 64 bit processors support a 256TiB virtual address space (with a
 theoretical maximum of 16EiB). Paging is a system which allows each 
process to see the full virtual address space, without actually 
requiring the full amount of physical RAM to be physically installed. In
 fact, current implementations of x86-64 has a current physical RAM 
limit of 1TiB and a theoretical limit of 4PiB of physical RAM.
</p><p>In addition to this, paging introduces the benefit of page-level 
protection. In this system, user-level processes can only see and modify
 data which is paged in to their own address space, providing hardware 
isolation. System pages are also protected from user processes. On the 
x86-64 architecture, page-level protection now completely supersedes <a href="http://wiki.osdev.org/Segmentation" title="Segmentation">Segmentation</a>
 as the memory protection mechanism. On the IA32 architecture, both 
paging and segmentation exist, but segmentation is now considered 
'legacy'.
</p><p>Once an Operating System has paging, it can also make use of 
other benefits and workarounds, such as linear framebuffer simulation 
for memory-mapped IO and paging out to disk, where disk storage space is
 used to free up physical RAM.
</p>
<h2> <span class="mw-headline" id="MMU">MMU</span></h2>
<p>Paging is achieved through the use of the MMU (temporary: <a href="http://wiki.osdev.org/MMU" title="MMU">article 1</a>, <a href="http://wiki.osdev.org/Memory_Management_Unit" title="Memory Management Unit">article 2</a>).
 The MMU is a unit that transforms virtual addresses into physical 
addresses based on the current page table.This section focuses on the 
x86 MMU.
</p>
<h3> <span class="mw-headline" id="Overview_2">Overview</span></h3>
<p>On the x86, the MMU maps memory through a series of tables, two to be
 exact. They are the paging directory, and the paging table.
</p><p>Both tables contain 1024 4byte entries, making them each 4kb. In 
the page directory, each entry points to a page table. In the page 
table, each entry points to a physical address that is then mapped to 
the virtual address found by calculating the offset within the directory
 and the offset within the table. This can be done as the entire table 
system represents a linear 4gb virtual memory map.
</p>
<h3> <span class="mw-headline" id="Page_Directory">Page Directory</span></h3>
<p>The topmost paging structure is the page directory. It is essentially
 an array of page directory entries that take the following form.
</p><p><b>Note: With 4mb pages, bits 21 through 12 are Reserved!</b>
</p>
<div class="thumb tright"><div class="thumbinner" style="width:434px;"><a href="http://wiki.osdev.org/File:Page_dir.png" class="image"><img alt="" src="Paging%20-%20OSDev%20Wiki_files/Page_dir.png" class="thumbimage" height="255" width="432"></a>  <div class="thumbcaption">A Page Directory Entry</div></div></div>
<p>The page table address field represents the physical address of the 
page table that manages the four megabytes at that point. Please note 
that it is very important that this address be 4 KiB aligned. This is 
needed, due to the fact that the last bits of the dword are overwritten 
by access bits and such.
</p>
<ul><li> S, or 'Page <b>S</b>ize' stores the page size for that specific
 entry. If the bit is set, then pages are 4 MiB in size. Otherwise, they
 are 4 KiB. Please note that for 4 MiB pages PSE have to be enabled.
</li><li> A, or '<b>A</b>ccessed' is used to discover whether a page has
 been read or written to. If it has, then the bit is set, otherwise, it 
is not. Note that, this bit will not be cleared by the CPU, so that 
burden falls on the OS (if it needs this bit at all).
</li><li> D, is the 'Cache <b>D</b>isable' bit. If the bit is set, the page will not be cached. Otherwise, it will be.
</li><li> W, the controls '<b>W</b>rite-Through' abilities of the page. 
If the bit is set, write-through caching is enabled. If not, then 
write-back is enabled instead.
</li><li> U, the '<b>U</b>ser\Supervisor' bit, controls access to the 
page based on privilege level. If the bit is set, then the page may be 
accessed by all; if the bit is not set, however, only the supervisor can
 access it. 
</li><li> R, the '<b>R</b>ead/Write' permissions flag. If the bit is 
set, the page is read/write. Otherwise when it is not set, the page is 
read-only. The WP bit in CR0 determines if this is only applied to 
userland, always giving the kernel write access (the default) or both 
userland and the kernel (see Intel Manuals 3A 2-20).
</li><li> P, or '<b>P</b>resent'. If the bit is set, the page is 
actually in physical memory at the moment. For example, when a page is 
swapped out, it is not in physical memory and therefore not 'Present'. 
If a page is called, but not present, a page fault will occur, and the 
OS should handle it. (See below.)
</li></ul>
<h3> <span class="mw-headline" id="Page_Table">Page Table</span></h3>
<p>In each page table, as it is, there are also 1024 entries. These are called page table entries, and are <b>very</b> similar to page directory entries.
</p>
<div class="thumb tleft"><div class="thumbinner" style="width:434px;"><a href="http://wiki.osdev.org/File:Page_table.png" class="image"><img alt="" src="Paging%20-%20OSDev%20Wiki_files/Page_table.png" class="thumbimage" height="256" width="432"></a>  <div class="thumbcaption">A Page Table Entry</div></div></div>
<p><i>Note: Only explanations of the bits unique to the page table are below.</i>
</p><p>The first item, is once again, a 4kb aligned physical address. 
Unlike previously, however, the address is not that of a page table, but
 instead a 4kb block of physical memory that is then mapped to that 
location in the page table and directory.
</p><p>The Global, or 'G' above, flag, if set, prevents the <a href="http://wiki.osdev.org/TLB" title="TLB">TLB</a>
 from updating the address in it's cache if CR3 is reset. Note, that the
 page global enable bit in CR4 must be set to enable this feature.
</p><p>If the Dirty flag ('D') is set, then the page has been written 
to. This flag is not updated by the CPU, and once set will not unset 
itself. 
</p><p>The 'C' bit is 'D' bit above.
</p>
<h4> <span class="mw-headline" id="INVLPG">INVLPG</span></h4>
<p>INVLPG is an instruction available since the 486 that invalidates a 
single page table entry in the TLB. Intel notes that this instruction 
may be implemented differently on future processes, but that this 
alternate behavior must be explicitly enabled. INVLPG modifies no flags.
</p><p>NASM example:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1">     invlpg <span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span></pre></div></div>
<p>Inline asm in GCC (from Linux kernel source):
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">static</span> <span class="kw2">inline</span> <span class="kw4">void</span> __native_flush_tlb_single<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> addr<span class="br0">)</span>
<span class="br0">{</span>
   asm <span class="kw4">volatile</span><span class="br0">(</span><span class="st0">"invlpg (%0)"</span> <span class="sy0">::</span><span class="st0">"r"</span> <span class="br0">(</span>addr<span class="br0">)</span> <span class="sy0">:</span> <span class="st0">"memory"</span><span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span></pre></div></div>
<h3> <span class="mw-headline" id="Example">Example</span></h3>
<p>Say I loaded my kernel to 0x100000. However, I want it mapped to 
0xc0000000. After loading my kernel, I initiate paging, and set up the 
appropriate tables. (See <a href="http://wiki.osdev.org/Higher_Half_Kernel" title="Higher Half Kernel">Higher Half Kernel</a>) After <a href="http://wiki.osdev.org/Identity_Paging" title="Identity Paging">Identity Paging</a>
 the first megabyte, I start to create my second table (ie. at entry 
#768 in my directory.) to map 0x100000 to 0xc0000000. My code could be 
like: <br><br>
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"> <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">0x0</span>
 <span class="kw1">mov</span> <span class="kw3">ebx</span><span class="sy0">,</span> <span class="nu0">0x100000</span>
 <span class="sy0">.</span>fill_table<span class="sy0">:</span>
      <span class="kw1">mov</span> <span class="kw3">ecx</span><span class="sy0">,</span> <span class="kw3">ebx</span>
      <span class="kw1">or</span> <span class="kw3">ecx</span><span class="sy0">,</span> <span class="nu0">3</span>
      <span class="kw1">mov</span> <span class="br0">[</span>table_768<span class="sy0">+</span><span class="kw3">eax</span><span class="sy0">*</span><span class="nu0">4</span><span class="br0">]</span><span class="sy0">,</span> <span class="kw3">ecx</span>
      <span class="kw1">add</span> <span class="kw3">ebx</span><span class="sy0">,</span> <span class="nu0">4096</span>
      <span class="kw1">inc</span> <span class="kw3">eax</span>
      <span class="kw1">cmp</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">1024</span>
      <span class="kw1">je</span> <span class="sy0">.</span><span class="kw4">end</span>
      <span class="kw1">jmp</span> <span class="sy0">.</span>fill_table
 <span class="sy0">.</span><span class="kw4">end</span><span class="sy0">:</span></pre></div></div>
<h2> <span class="mw-headline" id="Enabling">Enabling</span></h2>
<p>Enabling paging is actually very simple. All that is needed is to 
load CR3 with the address of the page directory and to set the paging 
bit of CR0. 
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"> <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="br0">[</span>page_directory<span class="br0">]</span>
 <span class="kw1">mov</span> <span class="kw3">cr3</span><span class="sy0">,</span> <span class="kw3">eax</span>
&nbsp;
 <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="kw3">cr0</span>
 <span class="kw1">or</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">0x80000000</span>
 <span class="kw1">mov</span> <span class="kw3">cr0</span><span class="sy0">,</span> <span class="kw3">eax</span></pre></div></div>
<p>To enable PSE (4 MiB pages) the following code is required.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"> <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> cr4
 <span class="kw1">or</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">0x00000010</span>
 <span class="kw1">mov</span> cr4<span class="sy0">,</span> <span class="kw3">eax</span></pre></div></div>
<h2> <span class="mw-headline" id="Physical_Address_Extension">Physical Address Extension</span></h2>
<p>All Intel processors since Pentium Pro (with exception of the Pentium
 M at 400 Mhz) and all AMD since the Athlon series implement the <a href="http://wiki.osdev.org/PAE" title="PAE" class="mw-redirect">Physical Address Extension</a>
 (PAE). This feature allows you to access up to 64 GB (2^36) of RAM. You
 can check for this feature using CPUID. Once checked, you can activate 
this feature by setting bit 5 in CR4.  Once active, the CR3 register 
points to a table of 4 64bit entries, each one pointing to a page 
directory made of 4096 bytes (like in normal paging), divided into 512 
64bit entries, each pointing to a 4096 byte page table, divided into 512
 64bit page entries.
</p>
<h2> <span class="mw-headline" id="Usage">Usage</span></h2>
<p>Due to the simplicity in the design of paging, it has many uses.
</p>
<h3> <span class="mw-headline" id="Virtual_Address_Spaces">Virtual Address Spaces</span></h3>
<p>In a paged system, each process may execute in its own 4gb area of 
memory, without any chance of effecting any other process's memory, or 
the kernel's.
</p>
<div class="thumb tnone"><div class="thumbinner" style="width:552px;"><a href="http://wiki.osdev.org/File:Virtual_memory.png" class="image"><img alt="" src="Paging%20-%20OSDev%20Wiki_files/Virtual_memory.png" class="thumbimage" height="175" width="550"></a>  <div class="thumbcaption">paging illustrated: two process with different views of the same physical memory</div></div></div>
<h3> <span class="mw-headline" id="Virtual_Memory">Virtual Memory</span></h3>
<p>Because paging allows for the dynamic handling of unallocated page 
tables, an OS can swap entire pages, not in current use, to the hard 
drive where they can wait until they are called. In the mean time, 
however, the  physical memory that they were using can be used 
elsewhere. In this way, the OS can manipulate the system so that 
programs actually seem to have more RAM than there actually is. 
</p><p><i>More...</i>
</p>
<h2> <span class="mw-headline" id="Manipulation">Manipulation</span></h2>
<p>The CR3 value, that is, the value containing the address of the page 
directory, is in physical form. Once, then, the computer is in paging 
mode, only recognizing those virtual addresses mapped into the paging 
tables, how can the tables be edited and dynamically changed?
</p><p>Many prefer to map the last PDE to itself. The page directory 
will look like a page table to the system. To get the physical address 
of any virtual address in the range 0x00000000-0xFFFFF000 is then just a
 matter of:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">void</span> <span class="sy0">*</span> get_physaddr<span class="br0">(</span><span class="kw4">void</span> <span class="sy0">*</span> virtualaddr<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">unsigned</span> <span class="kw4">long</span> pdindex <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span><span class="br0">)</span>virtualaddr <span class="sy0">&gt;&gt;</span> <span class="nu0">22</span><span class="sy0">;</span>
    <span class="kw4">unsigned</span> <span class="kw4">long</span> ptindex <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span><span class="br0">)</span>virtualaddr <span class="sy0">&gt;&gt;</span> <span class="nu0">12</span> <span class="sy0">&amp;</span> <span class="nu12">0x03FF</span><span class="sy0">;</span>
&nbsp;
    <span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="sy0">*</span> pd <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="sy0">*</span><span class="br0">)</span><span class="nu12">0xFFFFF000</span><span class="sy0">;</span>
    <span class="co1">// Here you need to check whether the PD entry is present.</span>
&nbsp;
    <span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="sy0">*</span> pt <span class="sy0">=</span> <span class="br0">(</span><span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="sy0">*</span><span class="br0">)</span><span class="nu12">0xFFC00000</span><span class="br0">)</span> <span class="sy0">+</span> <span class="br0">(</span><span class="nu12">0x400</span> <span class="sy0">*</span> pdindex<span class="br0">)</span><span class="sy0">;</span>
    <span class="co1">// Here you need to check whether the PT entry is present.</span>
&nbsp;
    <span class="kw1">return</span> <span class="br0">(</span><span class="kw4">void</span> <span class="sy0">*</span><span class="br0">)</span><span class="br0">(</span><span class="br0">(</span>pt<span class="br0">[</span>ptindex<span class="br0">]</span> <span class="sy0">&amp;</span> ~<span class="nu12">0xFFF</span><span class="br0">)</span> <span class="sy0">+</span> <span class="br0">(</span><span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span><span class="br0">)</span>virtualaddr <span class="sy0">&amp;</span> <span class="nu12">0xFFF</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span></pre></div></div>
<p>To map a virtual address to a physical address can be done as follows:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">void</span> map_page<span class="br0">(</span><span class="kw4">void</span> <span class="sy0">*</span> physaddr<span class="sy0">,</span> <span class="kw4">void</span> <span class="sy0">*</span> virtualaddr<span class="sy0">,</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> flags<span class="br0">)</span>
<span class="br0">{</span>
    <span class="co1">// Make sure that both addresses are page-aligned.</span>
&nbsp;
    <span class="kw4">unsigned</span> <span class="kw4">long</span> pdindex <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span><span class="br0">)</span>virtualaddr <span class="sy0">&gt;&gt;</span> <span class="nu0">22</span><span class="sy0">;</span>
    <span class="kw4">unsigned</span> <span class="kw4">long</span> ptindex <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span><span class="br0">)</span>virtualaddr <span class="sy0">&gt;&gt;</span> <span class="nu0">12</span> <span class="sy0">&amp;</span> <span class="nu12">0x03FF</span><span class="sy0">;</span>
&nbsp;
    <span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="sy0">*</span> pd <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="sy0">*</span><span class="br0">)</span><span class="nu12">0xFFFFF000</span><span class="sy0">;</span>
    <span class="co1">// Here you need to check whether the PD entry is present.</span>
    <span class="co1">// When it is not present, you need to create a new empty PT and</span>
    <span class="co1">// adjust the PDE accordingly.</span>
&nbsp;
    <span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="sy0">*</span> pt <span class="sy0">=</span> <span class="br0">(</span><span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="sy0">*</span><span class="br0">)</span><span class="nu12">0xFFC00000</span><span class="br0">)</span> <span class="sy0">+</span> <span class="br0">(</span><span class="nu12">0x400</span> <span class="sy0">*</span> pdindex<span class="br0">)</span><span class="sy0">;</span>
    <span class="co1">// Here you need to check whether the PT entry is present.</span>
    <span class="co1">// When it is, then there is already a mapping present. What do you do now?</span>
&nbsp;
    pt<span class="br0">[</span>ptindex<span class="br0">]</span> <span class="sy0">=</span> <span class="br0">(</span><span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span><span class="br0">)</span>physaddr<span class="br0">)</span> <span class="sy0">|</span> <span class="br0">(</span>flags <span class="sy0">&amp;</span> <span class="nu12">0xFFF</span><span class="br0">)</span> <span class="sy0">|</span> <span class="nu12">0x01</span><span class="sy0">;</span> <span class="co1">// Present</span>
&nbsp;
    <span class="co1">// Now you need to flush the entry in the TLB</span>
    <span class="co1">// or you might not notice the change.</span>
<span class="br0">}</span></pre></div></div>
<p>Unmapping an entry is essentially the same as above, but instead of assigning the <code>pt[ptindex]</code>
 a value, you set it to 0x00000000 (i.e. not present). When the entire 
page table is empty, you may want to remove it and mark the page 
directory entry 'not present'. Of course you don't need the 'flags' or 
'physaddr' for unmapping.
</p>
<h2> <span class="mw-headline" id="Page_Faults">Page Faults</span></h2>
<p>A page fault exception is caused when a process is seeking to access 
an area of virtual memory that is not mapped to any physical memory, 
when a write is attempted on a read-only page, when accessing a PTE or 
PDE with the reserved bit or when permissions are inadequate.
</p>
<h3> <span class="mw-headline" id="Handling">Handling</span></h3>
<p>The CPU pushes an error code on the stack before firing a page fault 
exception.  The error code must be analyzed by the exception handler to 
determine how to handle the exception.  The bottom 3 bits of the 
exception code are the only ones used, bits 3-31 are reserved.
</p>
<pre>Bit 0 (P) is the Present flag.
Bit 1 (R/W) is the Read/Write flag.
Bit 2 (U/S) is the User/Supervisor flag.
</pre>
<p>The combination of these flags specify the details of the page fault and indicate what action to take:
</p>
<pre>US RW  P - Description
0  0  0 - Supervisory process tried to read a non-present page entry
0  0  1 - Supervisory process tried to read a page and caused a protection fault
0  1  0 - Supervisory process tried to write to a non-present page entry
0  1  1 - Supervisory process tried to write a page and caused a protection fault
1  0  0 - User process tried to read a non-present page entry
1  0  1 - User process tried to read a page and caused a protection fault
1  1  0 - User process tried to write to a non-present page entry
1  1  1 - User process tried to write a page and caused a protection fault
</pre>
<p>When the CPU fires a page-not-present exception the CR2 register is 
populated with the linear address that caused the exception.  The upper 
10 bits specify the page directory entry (PDE) and the middle 10 bits 
specify the page table entry (PTE).  First check the PDE and see if it's
 present bit is set, if not setup a page table and point  the PDE to the
 base address of the page table, set the present bit and iretd.  If the 
PDE is present then the present bit of the PTE will be cleared.  You'll 
need to map some physical memory to the page table, set the present bit 
and then iretd to continue processing.
</p>
<h2> <span class="mw-headline" id="Paging_Tricks">Paging Tricks</span></h2>
<p>The processor always fires a page fault exception when the present 
bit is cleared in the PDE or PTE regardless of the address.  This means 
the contents of the PTE or PDE can be used to indicate a location of the
 page saved on mass storage and to quickly load it.  When a page gets 
swapped to disk, use these entries to identify the location in the 
paging file where they can be quickly loaded from then set the present 
bit to 0.
</p>
<h2> <span class="mw-headline" id="See_Also">See Also</span></h2>
<h3> <span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="http://wiki.osdev.org/Identity_Paging" title="Identity Paging">Identity Paging</a>
</li><li><a href="http://wiki.osdev.org/Page_Frame_Allocation" title="Page Frame Allocation">Page Frame Allocation</a>
</li><li><a href="http://wiki.osdev.org/Setting_Up_Paging" title="Setting Up Paging">Setting Up Paging</a>
</li><li><a href="http://wiki.osdev.org/Page_Tables" title="Page Tables">Page Tables</a>
</li></ul>
<h3> <span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://www.viralpatel.net/taj/tutorial/paging.php">Paging Tutorial</a>
</li><li><a rel="nofollow" class="external text" href="http://forum.osdev.org/viewtopic.php?f=1&amp;t=18222">INVLPG thread</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 189/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2122-0!*!0!!en!2!* and timestamp 20130611144858 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Paging&amp;oldid=14596">http://wiki.osdev.org/index.php?title=Paging&amp;oldid=14596</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="http://wiki.osdev.org/Category:Memory_management" title="Category:Memory management">Memory management</a></li><li><a href="http://wiki.osdev.org/Category:Security" title="Category:Security">Security</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Paging" title="You are encouraged to log in; however, it is not mandatory [alt-shift-o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li id="ca-nstab-main" class="selected"><span><a href="http://wiki.osdev.org/Paging" title="View the content page [alt-shift-c]" accesskey="c">Page</a></span></li>
					<li id="ca-talk"><span><a href="http://wiki.osdev.org/Talk:Paging" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="http://wiki.osdev.org/Paging">Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Paging&amp;action=edit" title="This page is protected.
You can view its source [alt-shift-e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Paging&amp;action=history" title="Past revisions of this page [alt-shift-h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="/index.php" id="searchform">
		<input name="title" value="Special:Search" type="hidden">
				<input name="search" title="Search OSDev Wiki [alt-shift-f]" accesskey="f" id="searchInput" type="search">		<input name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" type="submit">		<input name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" type="submit">			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="http://wiki.osdev.org/Main_Page" title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id="p-navigation">
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="http://wiki.osdev.org/Main_Page" title="Visit the main page [alt-shift-z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="http://wiki.osdev.org/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="http://wiki.osdev.org/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [alt-shift-x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id="p-about">
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="http://wiki.osdev.org/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="http://wiki.osdev.org/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="http://wiki.osdev.org/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [alt-shift-r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id="p-tb">
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Paging" title="A list of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Paging" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Paging&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Paging&amp;oldid=14596" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->
<div class="portal" id="p-lang">
	<h5>In other languages</h5>
	<div class="body">
		<ul>
			<li class="interwiki-de"><a href="http://www.lowlevel.eu/wiki/Paging" title="Paging">Deutsch</a></li>
		</ul>
	</div>
</div>

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 26 April 2013, at 05:32.</li>
											<li id="footer-info-viewcount">This page has been accessed 105,414 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wiki.osdev.org/OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://wiki.osdev.org/OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="http://wiki.osdev.org/OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="Paging%20-%20OSDev%20Wiki_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" height="31" width="88"></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="Paging%20-%20OSDev%20Wiki_files/load_006.php"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script><script type="text/javascript" src="Paging%20-%20OSDev%20Wiki_files/load_005.php"></script>
<script src="Paging%20-%20OSDev%20Wiki_files/load_004.php"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.069 secs. -->
	

</body></html>