PROGRAMMING GUIDELINES

CONTENTS

1.  READING THIS DOCUMENT
2.  HEADER
3.  CONFORMITY
4.  INCLUDE GUIDELINES
5.  NAMING CONVENTIONS
6.  BRACES AND BRACKETS
7.  INDENTATION
8.  LOCAL AND GLOBAL VARIABLES
9.  COMMENTS AND DEBUG PRINTING
10. ERROR HANDLING
11. NEW CONVENTIONS


1.  READING THIS DOCUMENT
	//TODO


2.  HEADER
	//TODO update the header; isn't it easier to say that we all hold the
	//copyright?
	2.1. Header of the headers
		Make sure that over every header file and in all code files without such
		a header file one finds the following header:

/* dir/filename.[hcsinc]+
 *
 * Short description. Optional a link to a documentation file in doc/
 *
 * Copyright (C) <year> <name of author>. All Rights Reserved.
 * Written by <name of author> (<mail of author>)
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 */
		
		(In other languages the first two signs of every line might have to be
		altered.)
		If a hardware dependend code file uses a hardware independend header
		file (as it should) both shall have a header.
		
		If you edit a file, you may place your copyright in the header
		ADDITIONAL to the ones that are there.
		
	2.2. Function prototypes
		Every function which is not only used in the corresponding code file has
		to have a prototype in the header file. Functions without prototypes are
		to mark to the compiler with the keyword 'static'.
		
	2.3. Include guards
		Every header file has to have an include guard compliant to the
		following example:
		
		//Header - see 2.1.
		
		#ifndef _<UPPER_CASE_FILE_BASENAME>_<UPPER_CASE_FILE_EXTENSION>
		#define _<UPPER_CASE_FILE_BASENAME>_<UPPER_CASE_FILE_EXTENSION>
		
		//prototype includes
		
		//prototypes
		
		//code includes
		
		#endif /* _<UPPER_CASE_FILE_BASENAME>_<UPPER_CASE_FILE_EXTENSION> */


3.  CONFORMITY
	3.1. POSIX
		Especially when you rewrite standard libraries look up if the file you
		want to provide underlies any POSIX standard. One of the goals of this
		project is to be POSIX conform from the beginning on. More information about
		POSIX can be achieved on:
			http://www.opengroup.org/
		So please use the prototypes given by opengroup.
		
		If you write a posix conform header file the short description given in the
		header should comply to this example:
		
/* <basename>.h
 * 
 * This file tries to follow the standardizations specified in the POSIX
 * Programmers Manual wich can be reached through
 * 		http://pubs.opengroup.org/<subpath/to/specific/header>
 *
 * <other stuff>
 */
 
	3.2. Use of data types
		If you implement POSIX functions use the datatypes given by the
		standard. If not use the types defined in include/stdint.h for any
		integer to get a guaranteed number of bits. (int32_t -> guaranteed 32
		bit integer) Think about how many bits you need! Everything has to be
		as efficient as possible.


4.  INCLUDE GUIDELINES
	In every code file, just include the proper header file. If there are header
	files wich are needed for the prototypes (!) only those files may be
	included before the prototypes. All includes only needed in the code file
	are to be included right before the end of the include guard.


5.  NAMING CONVENTIONS
	5.1. Functions
		Any function name should be a very short description of its purpose:
		
		type shortDesc(paramOne, ...);
		
		Underscores are not allowed, use upper case and lower case letters to
		differentiate between words. (As in the previous example.)
		
		Use const keyword whenever possible.
		
	5.2. Variables
		Use the same specifications as for functions. (See 5.1.)
		An exception are the counter variables - see 5.4.
		
	5.3. Files
		If for your application there is a POSIX documentation name the header
		file accordingly. The corresponding codefile must have the same base
		file name. (Only the extension differs.)
		If no POSIX standard applies give your file a recognizable name in lower
		case letters. The length of the base name shall not exceed 10 letters.
		
	5.4. Counter variables
		Counter variables shall be named with i and the direct followers in the
		latin alphabet. They shall not exceed n. If you need more, you
		definitely write far too long functions.
		
	5.5. Structs
		Structs have to be anonymously defined and be assigned via typedef to an
		appropriate name wich follows the conventions given in 5.2.:
		
		typedef struct	
		{
			//contents
		}__attribute__((packed)) typeName;
		
		ATTENTION: be sure to add the "__attribute__((packed))" statement when
		the exact placement of the contents is important! (e.g. if the struct
		represents the structure of a given bitfield)
		
	5.6. Macros
		Macros are to be named in upper case letters and may also continue
		underscores. Macros may be declared globally or locally. The preferred
		method is to declare macros locally in the code file!


6.  BRACES AND BRACKETS
	Matching brackets may be either in the same line:
		functionPtr[element](arg);
	Matching braces (or "curly brackets") are not to be in the same line but in
	the same column. Every block of code has to be surrounded by brackets.
	Therefore the following use of e.g. conditions is INVALID:
	
	if(condition)
		singleExpression;
	
	Correct use of brackets:
	
	if(condition)
	{
		expressions;
	}
	


7.  INDENTATION
	The bracket following to a keyword (e.g. struct) or condition is NOT to be
	indented. Any block surrounded by brackets is to be indented with one tab.
	For faster editing one must use tabs and it is not allowed to use any count
	of spaces. Please configure your editor that way that one tab will be shown
	as 4 spaces (but not replaced by it).


8.  LOCAL AND GLOBAL VARIABLES
	Use local variables whenever possible. Pass pointers to functions for
	avioding global variables. If global variables are really (!) nessecary they
	have to be declared in a header file. (Definition follows in the code file.)
	If a variable is used for several functions, mark it as static so that's
	only visible in this code file.


9.  COMMENTS AND DEBUG PRINTING
	Comments must not exceed the 80th column of every document. Write comments
	whenever you see it's needed - but do it in english.
	
	For printing out debug values or statements simply use the function
		printDebug(char * format, ...);
	The prototype lies in <print.h>. For printing errors and fatal errors use
	these function:
		printErr(char * format, ...);
		fatalErr(char * format, ...);
	which lie in the same header. Note that the latter one will halt the kernel!


10. ERROR HANDLING
	If no error occurs the return value of any function has to be non-negative.
	Any negative value indicates an error where abs(return value) is the error
	number constant defined in errno.h. So if you return an error code, include
	the <errno.h> at the end of your header file and use those constants:
		return -NOT_IMPLEMENTED;
	Since the constants in errno.h are positive, don't forget the sign! Also
	make sure your function doesn't return an unsigned value.
	
	If a function returns an error value you may use the following types defined
	in <errno.h>:
		uerr_t
		err_t
	which have guaranteed as enought bits to hold any error value defined in
	<errno.h>.
	
	When a function returns an error value, you may also use the following
	functions to easily check an error value and print a readable message to the
	user or even halt the kernel:
		//halts the kernel if an error code is returned
		void assertSuccess(const err_t errCode);
		
		//prints a readable warning message, if an error is returned
		void printErrMsg(const err_t errCode);
		
		//returns a readable text for the given error code
		char * getErrText(const err_t errCode);


11. NEW CONVENTIONS
	If you have an idea how to improve the code through this standardization
	even more just write an email to lasse.schuirmann@gmail.com . I'll see over
	it.

Greetings,

Lasse Schuirmann
