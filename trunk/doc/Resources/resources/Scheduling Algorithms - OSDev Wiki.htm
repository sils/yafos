<!DOCTYPE html>
<html dir="ltr" class="client-js" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Scheduling Algorithms - OSDev Wiki</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.18.0">
<link rel="shortcut icon" href="http://wiki.osdev.org/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)">
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd">
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom">
<link rel="stylesheet" href="Scheduling%20Algorithms%20-%20OSDev%20Wiki_files/load.css">
<style type="text/css" media="all">.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}

/* cache key: wikidb:resourceloader:filter:minify-css:4:4250852ed2349a0d4d0fc6509a3e7d4c */
</style><style type="text/css" media="all">.js-messagebox{margin:1em 5%;padding:0.5em 2.5%;border:1px solid #ccc;background-color:#fcfcfc;font-size:0.8em}.js-messagebox .js-messagebox-group{margin:1px;padding:0.5em 2.5%;border-bottom:1px solid #ddd}.js-messagebox .js-messagebox-group:last-child{border-bottom:thin none transparent}

/* cache key: wikidb:resourceloader:filter:minify-css:4:8b08bdc91c52a9ffba396dccfb5b473c */
</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="Scheduling%20Algorithms%20-%20OSDev%20Wiki_files/load_002.css">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="Scheduling%20Algorithms%20-%20OSDev%20Wiki_files/load_003.php"></script><script src="Scheduling%20Algorithms%20-%20OSDev%20Wiki_files/load_002.php"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Scheduling_Algorithms", "wgTitle": "Scheduling Algorithms", "wgCurRevisionId": 10878, "wgArticleId": 1477, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Stubs", "Processes and Threads", "Common Algorithms"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script><script type="text/javascript" src="Scheduling%20Algorithms%20-%20OSDev%20Wiki_files/load.php"></script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Scheduling_Algorithms action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div class="js-messagebox" id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Scheduling Algorithms</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="#mw-head">navigation</a>,
					<a href="#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div dir="ltr" class="mw-content-ltr" lang="en"><p>A scheduling algorithm is the algorithm which dictates how much CPU time is allocated to <a href="http://wiki.osdev.org/Processes_and_Threads" title="Processes and Threads">Processes and Threads</a>. The goal of any scheduling algorithm is to fulfill a number of criteria:
</p>
<ul><li> no task must be starved of resources - all tasks must get their chance at CPU time;
</li><li> if using priorities, a low-priority task must not hold up a high-priority task;
</li><li> the scheduler must scale well with a growing number of tasks, 
ideally being O(1). This has been done, for example, in the Linux 
kernel.
</li></ul>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle">&nbsp;[<a href="#" class="internal" id="togglelink">hide</a>]&nbsp;</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Interactive_Scheduling_Algorithms"><span class="tocnumber">1</span> <span class="toctext">Interactive Scheduling Algorithms</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Round_Robin"><span class="tocnumber">1.1</span> <span class="toctext">Round Robin</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Priority-Based_Round_Robin"><span class="tocnumber">1.2</span> <span class="toctext">Priority-Based Round Robin</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="#SVR2_Unix_Implementation"><span class="tocnumber">1.2.1</span> <span class="toctext">SVR2 Unix Implementation</span></a>
<ul>
<li class="toclevel-4 tocsection-5"><a href="#References"><span class="tocnumber">1.2.1.1</span> <span class="toctext">References</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2 tocsection-6"><a href="#Shortest_Process_Next"><span class="tocnumber">1.3</span> <span class="toctext">Shortest Process Next</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Lottery_Scheduling"><span class="tocnumber">1.4</span> <span class="toctext">Lottery Scheduling</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="#Batch_Scheduling_Algorithms"><span class="tocnumber">2</span> <span class="toctext">Batch Scheduling Algorithms</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="#First_Come_First_Served"><span class="tocnumber">2.1</span> <span class="toctext">First Come First Served</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Shortest_Job_First_.28SJF.29"><span class="tocnumber">2.2</span> <span class="toctext">Shortest Job First (SJF)</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Shortest_Remaining_Time_Next"><span class="tocnumber">2.3</span> <span class="toctext">Shortest Remaining Time Next</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#Highest_Response_Ratio_Next"><span class="tocnumber">2.4</span> <span class="toctext">Highest Response Ratio Next</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="#Real-Time_Scheduling_Algorithms"><span class="tocnumber">3</span> <span class="toctext">Real-Time Scheduling Algorithms</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="#Rate_Monotonic_Scheduling"><span class="tocnumber">3.1</span> <span class="toctext">Rate Monotonic Scheduling</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Earliest_Deadline_First"><span class="tocnumber">3.2</span> <span class="toctext">Earliest Deadline First</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="#Articles"><span class="tocnumber">4.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="#Threads"><span class="tocnumber">4.2</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#External_Links"><span class="tocnumber">4.3</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table>
<h2> <span class="mw-headline" id="Interactive_Scheduling_Algorithms">Interactive Scheduling Algorithms</span></h2>
<h3> <span class="mw-headline" id="Round_Robin">Round Robin</span></h3>
<p>Round Robin is the simplest algorithm for a preemptive scheduler. 
Only a single queue of processes is used. When the system timer fires, 
the next process in the queue is switched to, and the preempted process 
is put back into the queue.
</p><p>Each process is assigned a time slice or "quantum". This quantum 
dictates the number of system timer ticks the process may run for before
 being preempted. For example, if the timer runs at 100Hz, and a 
process' quantum is 10 ticks, it may run for 100 milliseconds (10/100 of
 a second). To achieve this, the running process is given a variable 
that starts at its quantum, and is then decremented each tick until it 
reaches zero. The process may also relinquish its quantum by doing a 
blocking system call (i.e. I/O), like in other preemptive algorithms.
</p><p>In the Round Robin algorithm, each process is given an equal quantum; the big question how to choose the time quantum.
</p><p>Here are some considerations:
The smaller the quantum, the larger the proportion of the time used in context switches.<br>
Interactive processes should do I/O before being preempted, so that unnecessary preemptions are avoided.<br>
The larger the quantum, the "laggier" the user experience - quanta above 100ms should be avoided.<br> 
</p><p>A frequently chosen compromise for the quantum is between 20ms and 50ms.
</p><p>Advantages of Round Robin include its simplicity and strict 
"first come, first served" nature. Disadvantages include the absence of a
 priority system: lots of low privilege processes may starve one high 
privilege one.
</p>
<h3> <span class="mw-headline" id="Priority-Based_Round_Robin">Priority-Based Round Robin</span></h3>
<p>Priority scheduling is similar to Round Robin, but allows a hierarchy
 of processes. Multiple process queues are used, one for each priority. 
As long as there are processes in a higher priority queue, they are run 
first. For example, if you have 2 queues, "high" and "low", in this 
state:
</p><p>"high": X<br>
"low": xterm, vim, firefox
</p><p>The first process to run would be X, then if it blocked (for I/O, probably), the state would be:
</p><p>"high":<br>
"low": xterm, vim, firefox
</p><p>The next process that would run would be xterm. If process "kswapd" is added to "high", it would then get the next quantum:
</p><p>"high": kswapd<br>
"low": vim, firefox, xterm
</p><p>There are usually between four and sixteen queues used in a priority scheduler.
</p><p>Advantages of this algorithm are simplicity and reasonable 
support for priorities. The disadvantage (or possible advantage) is that
 privileged processes may completely starve unprivileged ones. This is 
less of a problem than it appears, because processes (especially 
daemons, which are usually privileged) are usually blocked for I/O. 
</p><p>Let's have a look on the round robin scheduler with three processes in the queue: A B C:
</p>
<pre>A(time 0) B(time 10) C(time 10)  A's time slice is zero: let's do round robin scheduling:
B(time 10) C(time 10) A(time 10) ... one clock tick occurs ... the next one ...
B(time 8) C(time 10) A(time 10)  ... several clock ticks occur ... b's time slice is worn out ...
C(time 10) A(time 10) B(time 10) ... ten clock ticks later ...
A(time 10) B(time 10) C(time 10) ... now A has its share of CPU time again.
</pre>
<h4> <span class="mw-headline" id="SVR2_Unix_Implementation">SVR2 Unix Implementation</span></h4>
<p>Classical UNIX systems scheduled <i>equal-priority</i> processes in a
 round-robin manner, each running for a fixed time quantum. If a higher 
priority process becomes runnable, it will preempt the current process 
(if it's <i>not</i> running in kernel mode, since classical UNIX kernels
 were non-preemptive) even if the process did not finish its time 
quantum. This way, high priority processes can possibly starve 
low-priority ones. To avoid this, a new factor in calculating a process 
priority was introduced: the 'usage' factor.
</p><p>This factor allows the kernel to vary processes priorities 
dynamically. When a process is not running, the kernel periodically 
increases its priority. When a process receives some CPU time, the 
kernel reduces its priority. This scheme will potentially prevent the 
starvation of any process, since eventually the priority of any waiting 
process will rise high enough to be scheduled.
</p><p>All user-space priorities are lower than the lowest system 
priority. The usage factor of a user-process is calculated by the amount
 of compute time to real-time consumed by the process. A process that 
has used a lot of compute time in the last real-time unit is assigned a 
low user priority. Because interactive processes are characterized by 
low ratios of compute to real time, interactive response is maintained 
without any special arrangements.
</p><p>If there are no processes eligible for execution, the CPU idles till the next interrupt, which will happen <i>at most</i> after one clock tick. After handling the interrupt, the kernel again attempts to schedule a process to run.
</p>
<h5> <span class="mw-headline" id="References">References</span></h5>
<p>Ken Thompson, "UNIX Implementation", 2.3 - Synchronization and Scheduling, Bell Laboratories
</p><p>Maurice J. Bach, "The Design of the UNIX Operating System", Chapter 8 - Process Scheduling and Time, Prentice Hall
</p>
<h3> <span class="mw-headline" id="Shortest_Process_Next"> Shortest Process Next </span></h3>
<p>Version of SRTN (Shortest Remaining Time Next) for interactive 
systems. The Problem here is that we can't say what the user's next 
command will be. This algorithm needs prediction&nbsp;:)
</p>
<h3> <span class="mw-headline" id="Lottery_Scheduling"> Lottery Scheduling </span></h3>
<p>Lottery Scheduling is a simple algorithm that statistically 
guarantees a variable fraction of processor time to each runnable 
process. The concept is much like a lottery. At each scheduling 
decision, each runnable process is given a number of "lottery tickets". 
Then a random number is generated, corresponding to a specific ticket. 
The process with that ticket gets the quantum.
</p><p>Although there is no absolute guarantee that processes will be 
treated equally, the frequency of scheduling events in a preemptive 
multitasking system means that it comes very close to doing so. The 
number of tickets given to a process divided by the total number of 
tickets is the statistical fraction of the quanta given to that process.
 For example, if these processes are given this number of tickets:
</p><p>foo - 5<br>
bar - 7<br>
bash - 4
</p><p>The fractions of processor time given to each should be:
</p><p>foo - 5/16 - 31%<br>
bar - 7/16 - 44%<br>
bash - 4/16 - 25%
</p><p>As you can see, it is trivial to create a fine grained priority system: just give higher priority processes more tickets.
</p><p>Advantages of Lottery Scheduling include fine grained priorities 
and statistical fairness. Disadvantages include the need for a reliable 
random number generator and non-absolute guarantees, especially on 
systems with large quanta.
</p><p>You need to implement a <a href="http://wiki.osdev.org/Random_Number_Generator" title="Random Number Generator">Random Number Generator</a> to use this algorithm.
</p>
<h2> <span class="mw-headline" id="Batch_Scheduling_Algorithms">Batch Scheduling Algorithms</span></h2>
<h3> <span class="mw-headline" id="First_Come_First_Served"> First Come First Served </span></h3>
<p>This scheduling method is used on Batch-Systems, it is NON-PREEMPTIVE.
It implements just one queue which holds the tasks in order they come in.
</p><p>The order the tasks arrive is very important for the Turnaround-Time:
</p><p>Task1(24) Task2(6) Task3(6)<br>
avg. Turnaround-Time = (24 + 30 + 36) / 3 = 30 time units  (this assumes all tasks arrive at time 0)
</p><p>Task1(6) Task2(6) Task3(24)<br>
avg. Turnaround-Time = (6 +12 +36) / 3 = 18 time units (this assumes all tasks arrive at time 0)
</p><p>Strengths:
</p><p>-Simple<br>
-Fair
</p><p>Problems:
</p><p>-Convoy Effect<br>
-Order of task arrival is very important for average Turnaround time
</p>
<h3> <span class="mw-headline" id="Shortest_Job_First_.28SJF.29"> Shortest Job First (SJF) </span></h3>
<p>Is also NON-PREEMPTIVE. It selects the shortest Job/Process which is available in the run queue.<br>
This scheduling algorithm assumes that run times are known in advance.
</p><p>Strengths:
</p><p>-nearly optimal (Turnaround Time)
</p><p>Problems:
</p><p>-Only optimal if all jobs/process are available simultaneously<br> 
-Usually run times are not known ...
</p>
<h3> <span class="mw-headline" id="Shortest_Remaining_Time_Next">Shortest Remaining Time Next</span></h3>
<p>Preemptive version of SJF (Shortest Job First).
Schedulre picks the job/process which has the lowest remaining time to run.
</p><p>Strengths:
</p><p>-probably optimal (Tournaround Time)
</p><p>Problems:
</p><p>-again run times must be known
</p>
<h3> <span class="mw-headline" id="Highest_Response_Ratio_Next">Highest Response Ratio Next</span></h3>
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="http://wiki.osdev.org/File:Stub.png" class="image" title="This article is a stub!"><img alt="This article is a stub!" src="Scheduling%20Algorithms%20-%20OSDev%20Wiki_files/Stub.png" height="50" width="50"></a>
This page or section is a <a href="http://wiki.osdev.org/Category:Stubs" title="Category:Stubs">stub</a>. You can help the wiki by <i>accurately</i> <a rel="nofollow" class="external text" href="http://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;action=edit">contributing</a> to it.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<h2> <span class="mw-headline" id="Real-Time_Scheduling_Algorithms">Real-Time Scheduling Algorithms</span></h2>
<p>Real-Time Scheduling Algorithms are a special class of algorithms of 
which it is required that they can guarantee a process will be done 
before its deadline. The only way these algorithms can work is if they 
at least know when the deadline for a process is, and how much the 
process takes of the system. Only if the system is not overloaded 
(subjective term) can the threads be guaranteed to finish before their 
deadline.
</p><p>Each task has to be scheduled X<sub>t</sub> times a second, or every Y<sub>t</sub> milliseconds (Y<sub>t</sub> = 1000 / X<sub>t</sub>). Each run of that task takes at most Z<sub>t</sub> milliseconds. This task then creates a load of L<sub>t</sub> = Z<sub>t</sub> / Y<sub>t</sub>.
</p><p>The system as a whole has a load L, which is the sum of all task-loads: L = <big>E</big> L<sub>t</sub>.
 If the system load exceeds 0.7 (in some rare cases it can be slightly 
larger, but we don't count them) the system is unschedulable using Rate 
Monotonic Scheduling. If this system load exceeds 1.0 it is 
unschedulable for any real-time system. Note that for normal systems any
 load is possible, including the ones that are extremely large. They 
will make the system very unusable though.
</p>
<h3> <span class="mw-headline" id="Rate_Monotonic_Scheduling">Rate Monotonic Scheduling</span></h3>
<p>Rate Monotonic Scheduling is a way to schedule Real-Time threads in 
such a way, that can be guaranteed that none of the threads will ever 
exceed their deadline.
</p><p>The load of the system may vary, but there is a utilisation-based
 test that, if satisfied, guarantees that the system will always be 
schedulable. As an example the utilisation limit for a system with one 
process is 100% (as there is no need for preemption). The utilisation 
limit for a system with 3 processes is approximately 69%.
</p><p>The utilisation based test is <i>sufficient</i> but not <i>necessary</i>.
 If a process set passes the utilisation based test, it will be 
schedulable. However, process sets can be constructed that fail the 
utilisation test but are in fact (trivially) schedulable.
</p><p>The RMS scheduling works by assigning each task a priority based 
on its interval. The task with the shortest interval gets the highest 
priority and the task with the largest interval gets the lowest priority
 (still real-time though). The tasks are then run similar to a 
prioritized preempting [#Round-Robin]. This means, any task that can run
 runs, and if a task runs but a task with a higher priority is 
available, the higher one runs instead.
</p><p>If your system is based on a <a href="#Round-Robin">Round-Robin</a> scheduler, this is the easiest way to do Real-Time scheduling.
</p>
<h3> <span class="mw-headline" id="Earliest_Deadline_First">Earliest Deadline First</span></h3>
<p>Each task in an EDF scheduler is assigned a _deadline_ (e.g. a moment
 in the future at which the task _must_ be completed). Every time a task
 is inserted in the system or completed, the scheduler looks for the 
task which has the closest deadline and selects it for execution. In 
order to ensure that the scheduler is still able to meet each deadline, a
 '<i>monitor</i> must evaluate if each new task doesn't overload the system and deny execution if it will do so.
</p><p>In order to implement EDF-based system, one will have to know 
both the _deadline_ of the task (which could optionally be computed as 
"no more than X ms in the future") and the expected time needed to 
perform the task (required by the monitor). QoS network routers usually 
implement variants of EDF scheduling.
</p><p>Again, there is a utilisation based test for EDF systems. The 
limit is simpler however - it is always 100%, no matter how many 
processes are in the set. This makes dynamic analysis of schedulability 
easier. Not only that, but the EDF utilisation test is both <i>sufficient</i> and <i>necessary</i>, so can be relied on to provide an accurate indication of schedulability.
</p><p>For more information, see "Real time systems and programming languages" by Burns &amp; Wellings.
</p>
<h2> <span class="mw-headline" id="See_Also">See Also</span></h2>
<h3> <span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="http://wiki.osdev.org/Real-Time_Systems" title="Real-Time Systems">Real-Time Systems</a>
</li></ul>
<h3> <span class="mw-headline" id="Threads">Threads</span></h3>
<ul><li><a href="http://forum.osdev.org/viewtopic.php?t=8575" class="extiw" title="topic:8575">Real-Time Scheduling</a>
</li></ul>
<h3> <span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://josh.trancesoftware.com/linux/">Linux 2.6 scheduler, under FDL</a>
</li><li><a href="http://wikipedia.org/wiki/Scheduling_%28computing%29" class="extiw" title="wikipedia:Scheduling (computing)">Wikipedia:Scheduling (computing)</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 121/1000000
Post-expand include size: 489/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1477-0!*!0!!en!2!* and timestamp 20130612161210 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;oldid=10878">http://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;oldid=10878</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="http://wiki.osdev.org/Category:Stubs" title="Category:Stubs">Stubs</a></li><li><a href="http://wiki.osdev.org/Category:Processes_and_Threads" title="Category:Processes and Threads">Processes and Threads</a></li><li><a href="http://wiki.osdev.org/Category:Common_Algorithms" title="Category:Common Algorithms">Common Algorithms</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Scheduling_Algorithms" title="You are encouraged to log in; however, it is not mandatory [alt-shift-o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li id="ca-nstab-main" class="selected"><span><a href="http://wiki.osdev.org/Scheduling_Algorithms" title="View the content page [alt-shift-c]" accesskey="c">Page</a></span></li>
					<li id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:Scheduling_Algorithms&amp;action=edit&amp;redlink=1" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="http://wiki.osdev.org/Scheduling_Algorithms">Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;action=edit" title="This page is protected.
You can view its source [alt-shift-e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;action=history" title="Past revisions of this page [alt-shift-h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="/index.php" id="searchform">
		<input name="title" value="Special:Search" type="hidden">
				<input name="search" title="Search OSDev Wiki [alt-shift-f]" accesskey="f" id="searchInput" type="search">		<input name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" type="submit">		<input name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" type="submit">			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="http://wiki.osdev.org/Main_Page" title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id="p-navigation">
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="http://wiki.osdev.org/Main_Page" title="Visit the main page [alt-shift-z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="http://wiki.osdev.org/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="http://wiki.osdev.org/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [alt-shift-x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id="p-about">
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="http://wiki.osdev.org/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="http://wiki.osdev.org/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="http://wiki.osdev.org/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [alt-shift-r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id="p-tb">
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Scheduling_Algorithms" title="A list of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Scheduling_Algorithms" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;oldid=10878" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 17 October 2010, at 15:51.</li>
											<li id="footer-info-viewcount">This page has been accessed 83,981 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wiki.osdev.org/OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://wiki.osdev.org/OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="http://wiki.osdev.org/OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="Scheduling%20Algorithms%20-%20OSDev%20Wiki_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" height="31" width="88"></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="Scheduling%20Algorithms%20-%20OSDev%20Wiki_files/load_006.php"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script><script type="text/javascript" src="Scheduling%20Algorithms%20-%20OSDev%20Wiki_files/load_004.php"></script>
<script src="Scheduling%20Algorithms%20-%20OSDev%20Wiki_files/load_005.php"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.069 secs. -->
	

</body></html>