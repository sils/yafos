<!DOCTYPE html>
<html dir="ltr" class="client-js" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Page Frame Allocation - OSDev Wiki</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.18.0">
<link rel="shortcut icon" href="http://wiki.osdev.org/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)">
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd">
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom">
<link rel="stylesheet" href="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/load.css">
<style type="text/css" media="all">.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}

/* cache key: wikidb:resourceloader:filter:minify-css:4:4250852ed2349a0d4d0fc6509a3e7d4c */
</style><style type="text/css" media="all">.js-messagebox{margin:1em 5%;padding:0.5em 2.5%;border:1px solid #ccc;background-color:#fcfcfc;font-size:0.8em}.js-messagebox .js-messagebox-group{margin:1px;padding:0.5em 2.5%;border-bottom:1px solid #ddd}.js-messagebox .js-messagebox-group:last-child{border-bottom:thin none transparent}

/* cache key: wikidb:resourceloader:filter:minify-css:4:8b08bdc91c52a9ffba396dccfb5b473c */
</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/load_002.css">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/load_003.php"></script><script src="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/load_002.php"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Page_Frame_Allocation", "wgTitle": "Page Frame Allocation", "wgCurRevisionId": 14204, "wgArticleId": 1461, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Common Algorithms", "Memory management"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script><script type="text/javascript" src="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/load.php"></script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Page_Frame_Allocation action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div class="js-messagebox" id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Page Frame Allocation</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="#mw-head">navigation</a>,
					<a href="#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div dir="ltr" class="mw-content-ltr" lang="en"><table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle">&nbsp;[<a href="#" class="internal" id="togglelink">hide</a>]&nbsp;</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Physical_Memory_Allocators"><span class="tocnumber">1</span> <span class="toctext">Physical Memory Allocators</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Bitmap"><span class="tocnumber">1.1</span> <span class="toctext">Bitmap</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Stack.2FList_of_pages"><span class="tocnumber">1.2</span> <span class="toctext">Stack/List of pages</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Sized_Portion_Scheme"><span class="tocnumber">1.3</span> <span class="toctext">Sized Portion Scheme</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Buddy_Allocation_System"><span class="tocnumber">1.4</span> <span class="toctext">Buddy Allocation System</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Hybrid_scheme"><span class="tocnumber">1.5</span> <span class="toctext">Hybrid scheme</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Hybrid_scheme_.232"><span class="tocnumber">1.6</span> <span class="toctext">Hybrid scheme #2</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="#Virtual_Addresses_Allocator"><span class="tocnumber">2</span> <span class="toctext">Virtual Addresses Allocator</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="#Flat_List"><span class="tocnumber">2.1</span> <span class="toctext">Flat List</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Tree-based_approach."><span class="tocnumber">2.2</span> <span class="toctext">Tree-based approach.</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="#See_Also"><span class="tocnumber">3</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="#Articles"><span class="tocnumber">3.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#Threads"><span class="tocnumber">3.2</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#External_Links"><span class="tocnumber">3.3</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table>
<h2> <span class="mw-headline" id="Physical_Memory_Allocators">Physical Memory Allocators</span></h2>
<p>These are the algorithms that will provide you a new page frame when 
you'll need it. The client of this algorithm is usually indifferent to 
which frame is returned, and especially, a request for n frames needn't 
to return contiguous frames (unless you are allocating memory for DMA 
operations like network packet buffers).
</p><p>N will be the size of the memory in pages in the following text.
</p>
<h3> <span class="mw-headline" id="Bitmap">Bitmap</span></h3>
<p>A large array of N/8 bytes is used as a large bit map of the memory 
usage (that is, bit #i in byte #n define the status of page #n*8+i). 
Setting the state of a given page is fast (O(1)), allocating a page may 
take time (O(N)).
</p>
<ul><li> a dword comparison can test up to 32 bits at once and thus speed up allocs
</li><li> keeping a pointer to the last allocated bit may improve the 
performance of the next search (keeping information about the fact all 
the previous bytes were searched unsuccessfully)
</li></ul>
<h3> <span class="mw-headline" id="Stack.2FList_of_pages">Stack/List of pages</span></h3>
<p>The address of each available physical frame is stored in a <a href="http://wiki.osdev.org/Stack" title="Stack">stack</a>-like dynamic structure. Allocating a page is fast (O(1)), freeing a page too but checking the state of a page is not practical.
</p>
<h3> <span class="mw-headline" id="Sized_Portion_Scheme">Sized Portion Scheme</span></h3>
<p>You split each area of, say 16kb into (for example) chunks of 1 8kb, 
and 2 4kb's. Then you hand out each chunk. By doing this you can find 
closer fits to exact sizes. That means less waste. So say that you have 
an area of 32kb
</p><p><a href="http://wiki.osdev.org/File:Sized_Portion_Scheme.png" class="image"><img alt="Sized Portion Scheme.png" src="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/Sized_Portion_Scheme.png" height="30" width="325"></a>
</p><p>You can even have 1, 2, even 3 or 4 (or more!) types of layouts 
for each portion. This way you have even more sizes to choose from.
</p>
<h3> <span class="mw-headline" id="Buddy_Allocation_System">Buddy Allocation System</span></h3>
<p>This is the physical memory allocator of Linux kernel. Note that 
linux has several buddies depending on whether the memory is suitable 
for ISA DMA, or is coming from 'high physical memory' or just 'normal'. 
Each buddy contains k bitmaps, each indicating the availability of 
2^i-sized and 2^i aligned blocks of free pages. Usually, linux uses from
 4K to 512K blocks.
</p>
<pre>                 0   4   8   12  16  20  24  28  32  36
                 ###.#....#........#...###...########.... real memory pattern

   buddy[0]---&gt;  ###.#.xx.#xxxxxxxx#.xx###.xx########xxxx 5  free 4K , 5-byte bitmap
   buddy[1]---&gt;  # # # . # . x x . # . # # . # # # # x x  5  free 8K , 20-bits map
   buddy[2]---&gt;  #   #   #   .   #   #   #   #   #   .    2  free 16K, 10-bits map
   buddy[3]---&gt;  #       #       #       #       #        0  free 32K, 5-bits map
</pre>
<p>A buddy for N pages is about twice the size of a bitmap for the same 
area, but it allows faster location of collections of pages. Figure 
above shows a 4-buddy with free pages/blocks denoted as . and used 
pages/blocks denoted as #. When a block contains at least one used 
sub-block, it is itself marked as used and sub-blocks that are part of a
 larger block are also marked as used (x on the figure). Say we want to 
allocate a 12-K region on this buddy, we'll lookup the bitmap of free 
16K blocks (which says we have one such starting at page #12 and another
 starting at page #36). buddy[2]-&gt;bit[4] is then set to 'used'. Now 
we only want 3 pages out of the 4 we got, so the remaining page is 
returned to the appropriated buddy bitmap (e.g. the single pages map). 
The resulting buddy is
</p>
<pre>                 0   4   8   12  16  20  24  28  32  36
                 ###.#....#..###...#...###...########.... real memory pattern

   buddy[0]---&gt;  ###.#.xx.#xx###.xx#.xx###.xx########xxxx 6  free 4K , 5-byte bitmap
   buddy[1]---&gt;  # # # . # . # # . # . # # . # # # # x x  5  free 8K , 20-bits map
   buddy[2]---&gt;  #   #   #   #   #   #   #   #   #   .    1  free 16K, 10-bits map
   buddy[3]---&gt;  #       #       #       #       #        0  free 32K, 5-bits map
</pre>
<p>Note that initially, only the largest regions are available, so if 
buddy[0] is apparently empty, we need to check buddy[1], then buddy[2] 
etc. for a free block to be split.
</p>
<h3> <span class="mw-headline" id="Hybrid_scheme">Hybrid scheme</span></h3>
<p>Allocators may be chained so that (for instance) a <a href="http://wiki.osdev.org/Stack" title="Stack">stack</a>
 only covers the last operations and that the 'bottom' of the stack is 
committed to a bitmap (for compact storage). If the stack lacks pages, 
it can scan the bitmap to find some (possibly in a background job).
</p>
<h3> <span class="mw-headline" id="Hybrid_scheme_.232">Hybrid scheme #2</span></h3>
<p>Instead of keeping track of just bits representing pages, or just page numbers on a <a href="http://wiki.osdev.org/Stack" title="Stack">stack</a>,
 use a big array of structs to represent the memory. In these page frame
 structs, store a single link to a next page (pointer-sized) and a 8-16 
bit information block indicating its status. Also include the virtual 
page pointer and the TCB to which the page number belongs. Keep pointers
 to each type of page, to both the start and the end of their lists. 
This way, you can easily display information about their content, the 
amount of pages for each type available, mix types, allow dynamic 
cleaning threads, do copy-on-write fairly easily and keep clear &amp; 
concise overviews of the pages. It functions as a reverse page mapping 
table that lists types of pages too.
</p><p>For an example implementation see AtlantisOS 0.0.2 or higher.
</p>
<h2> <span class="mw-headline" id="Virtual_Addresses_Allocator">Virtual Addresses Allocator</span></h2>
<h3> <span class="mw-headline" id="Flat_List">Flat List</span></h3>
<p>One straightforward way to manage big areas of addresses space is a 
linked-list (as depicted below). Each "free" region is associated with a
 descriptor giving its size and its base address. When some space needs 
to be allocated, the list is scanned for a region being large enough 
with a "first fit" or "best fit" (or whatever) algorithm. This was e.g. 
the way memory was managed by MS-DOS. When memory is allocated, the 
suitable entry is either removed (the whole region is allocated) or 
resized (only a portion of the region is allocated).
</p><p>Note that with flat linked-lists, both "is memory at address XXX 
free" or "where can i get a block of size YYY" questions may require a 
complete traversal of the list to get answered. If virtual memory gets 
fragmented and the list gets longer, that may become an issue. "Is 
memory at address XXX free?" is mainly used to merge two free zone into a
 new (bigger) one when a block is released, and it is easier to deal 
with if the list is kept ordered by growing addresses.
</p><p><a href="http://wiki.osdev.org/File:Flat_list.png" class="image"><img alt="Flat list.png" src="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/Flat_list.png" height="325" width="300"></a>
</p>
<h3> <span class="mw-headline" id="Tree-based_approach.">Tree-based approach.</span></h3>
<p>Since it is frequent that the list is searched for a given address or
 a given size, it may be interesting to use more efficient data 
structures. One of them that still keeps the ability of traversing the 
whole list is the AVL Tree. Each "node" in the AVL tree will describe a 
memory region and has pointer to the subtree of lower nodes and to the 
subtree of higher nodes.
</p>
<div class="floatnone"><a href="http://wiki.osdev.org/File:Tree_based.png" class="image"><img alt="Tree based.png" src="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/Tree_based.png" height="230" width="475"></a></div>
<p>While insertion/deletion in such a balanced tree requires more 
complex operations than linked list manipulation, searching the tree is 
usually achieved with O(log2(N)) rather than O(N) for linked lists -- 
that is, if you have 1000 entries, it requires 1000 iterations to scan 
the list against 10 iterations to find a given interval in the tree.
</p><p>Linux has used AVL trees for virtual addresses management for 
quite a while. Note however that it uses it for regions (like what you 
find in /proc/xxxx/maps), not for a malloc-like interface.
</p>
<h2> <span class="mw-headline" id="See_Also">See Also</span></h2>
<h3> <span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li> <a href="http://wiki.osdev.org/Memory_Allocation" title="Memory Allocation">Memory Allocation</a>
</li><li> <a href="http://wiki.osdev.org/Memory_management" title="Memory management">Memory management</a>
</li><li> <a href="http://wiki.osdev.org/Writing_a_memory_manager" title="Writing a memory manager">Writing a memory manager</a> - a tutorial
</li></ul>
<h3> <span class="mw-headline" id="Threads">Threads</span></h3>
<ul><li> <a href="http://forum.osdev.org/viewtopic.php?t=11320" class="extiw" title="topic:11320">Allocating memory for an allocator without an allocator</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=9450" class="extiw" title="topic:9450">A bitmap based allocation technique</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=8489" class="extiw" title="topic:8489">Ways to keep track of allocated RAM</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=8463" class="extiw" title="topic:8463">Questions about Memory Allocation</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=8387" class="extiw" title="topic:8387">Memory Management</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=8325" class="extiw" title="topic:8325">Memory Management to the X'th</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=9036" class="extiw" title="topic:9036">MM Questions</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=8741" class="extiw" title="topic:8741">(about)Tim Robinson Memory Management Tutorial #1</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=9781" class="extiw" title="topic:9781">Managing used/free pages</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=10279" class="extiw" title="topic:10279">Malloc, etc. (tute by curufir)</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=10747" class="extiw" title="topic:10747">Physical MM (by Freanan)</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?p=195116#p195116" class="extiw" title="post:195116">Concepts and key points on alternative memory management schemes</a>
</li></ul>
<h3> <span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li>mystran's <a rel="nofollow" class="external text" href="http://replay.web.archive.org/20081206102136/http://www.cs.hut.fi/%7Etvoipio/memtutor.html">Basic VMM for Dummies (cached)</a>
</li><li> <a href="http://wikipedia.org/wiki/Page_replacement_algorithm" class="extiw" title="wikipedia:Page replacement algorithm">Page replacement algorithm</a> on Wikipedia
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 111/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1461-0!*!0!!en!2!* and timestamp 20130612190908 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Page_Frame_Allocation&amp;oldid=14204">http://wiki.osdev.org/index.php?title=Page_Frame_Allocation&amp;oldid=14204</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="http://wiki.osdev.org/Category:Common_Algorithms" title="Category:Common Algorithms">Common Algorithms</a></li><li><a href="http://wiki.osdev.org/Category:Memory_management" title="Category:Memory management">Memory management</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Page_Frame_Allocation" title="You are encouraged to log in; however, it is not mandatory [alt-shift-o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li id="ca-nstab-main" class="selected"><span><a href="http://wiki.osdev.org/Page_Frame_Allocation" title="View the content page [alt-shift-c]" accesskey="c">Page</a></span></li>
					<li id="ca-talk"><span><a href="http://wiki.osdev.org/Talk:Page_Frame_Allocation" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="http://wiki.osdev.org/Page_Frame_Allocation">Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Page_Frame_Allocation&amp;action=edit" title="This page is protected.
You can view its source [alt-shift-e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Page_Frame_Allocation&amp;action=history" title="Past revisions of this page [alt-shift-h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="/index.php" id="searchform">
		<input name="title" value="Special:Search" type="hidden">
				<input name="search" title="Search OSDev Wiki [alt-shift-f]" accesskey="f" id="searchInput" type="search">		<input name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" type="submit">		<input name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" type="submit">			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="http://wiki.osdev.org/Main_Page" title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id="p-navigation">
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="http://wiki.osdev.org/Main_Page" title="Visit the main page [alt-shift-z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="http://wiki.osdev.org/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="http://wiki.osdev.org/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [alt-shift-x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id="p-about">
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="http://wiki.osdev.org/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="http://wiki.osdev.org/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="http://wiki.osdev.org/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [alt-shift-r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id="p-tb">
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Page_Frame_Allocation" title="A list of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Page_Frame_Allocation" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Page_Frame_Allocation&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Page_Frame_Allocation&amp;oldid=14204" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->
<div class="portal" id="p-lang">
	<h5>In other languages</h5>
	<div class="body">
		<ul>
			<li class="interwiki-de"><a href="http://www.lowlevel.eu/wiki/Physische_Speicherverwaltung" title="Physische Speicherverwaltung">Deutsch</a></li>
		</ul>
	</div>
</div>

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 6 January 2013, at 08:48.</li>
											<li id="footer-info-viewcount">This page has been accessed 55,227 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wiki.osdev.org/OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://wiki.osdev.org/OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="http://wiki.osdev.org/OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" height="31" width="88"></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/load_006.php"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script><script type="text/javascript" src="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/load_004.php"></script>
<script src="Page%20Frame%20Allocation%20-%20OSDev%20Wiki_files/load_005.php"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.289 secs. -->
	

</body></html>